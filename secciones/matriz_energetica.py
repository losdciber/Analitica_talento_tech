#Importaciones
#st: para la interfaz web.

#pd: para el manejo de datos.

#px: para gr√°ficos interactivos con Plotly.

#ejecutar_consulta: funci√≥n personalizada para obtener datos desde una base de datos (probablemente SQLite o PostgreSQL).

# separaci√≥n clara entre visualizaci√≥n, datos y l√≥gica de consulta.

import streamlit as st
import pandas as pd
import plotly.express as px
from utils import ejecutar_consulta

# üé® Paleta de colores

#Se define un diccionario para asignar colores espec√≠ficos a cada fuente energ√©tica.

#Esto mejora la consistencia visual entre gr√°ficos.

#Buen√≠sima pr√°ctica para que el usuario pueda reconocer intuitivamente cada fuente en gr√°ficos distintos.

COLOR_PALETTE = {
    'PETROLEO': '#636EFA',
    'GAS NATURAL': '#EF553B',
    'CARBON MINERAL': '#00CC96',
    'HIDROENERGIA': '#AB63FA',
    'LENA': '#FFA15A',
    'BAGAZO': '#19D3F3',
    'OTROS RENOVABLES': '#FF6692',
    'RECUPERACION_RESIDUOS': '#B6E880'
}

# Funcion Principal
#Define el punto de entrada de esta secci√≥n del dashboard.

#Aunque se recibe df_global, no se usa, ya que internamente se consulta BECO_Hist√≥rico.

def mostrar(df_global):
    st.title("üîã Matriz Energ√©tica de Colombia")

    # CConsulta y carga de datos / cargar datos desde la tabla BECO_Hist√≥rico


#Obtiene todos los registros de una tabla energ√©tica hist√≥rica.

#Luego se filtra por a√±o y fuente seg√∫n las selecciones del usuario.

    df = ejecutar_consulta('SELECT * FROM "BECO_Hist√≥rico"')

    # Sidebar con filtros

#Se implementan dos filtros:

#Selecci√≥n de a√±o.

#Selecci√≥n de fuentes energ√©ticas.

#Los valores se actualizan din√°micamente con base en los datos disponibles del a√±o seleccionado.

#natural e intuitivo para el usuario.

    with st.sidebar:
        st.markdown("### üéõÔ∏è Filtros - Matriz Energ√©tica")

        anios = sorted(df["YEAR"].unique())
        anio = st.selectbox("üìÖ Selecciona un a√±o", anios, index=len(anios) - 1)

        df_anio = df[df["YEAR"] == anio]
        fuentes_disponibles = sorted(df_anio["NOMBRE_ENERGETICO"].dropna().unique())
        fuentes_sel = st.multiselect(
            "üîå Selecciona fuentes energ√©ticas",
            options=fuentes_disponibles,
            default=fuentes_disponibles,
            key="fuentes_matriz"
        )

    # Filtrado y preparaci√≥n de datos

    #Se filtra el DataFrame para incluir solo los valores seleccionados por el usuario.

#Se genera color_map din√°mico

    df_filtrado = df_anio[df_anio["NOMBRE_ENERGETICO"].isin(fuentes_sel)]
    color_map = {fuente: COLOR_PALETTE.get(fuente, "#CCCCCC") for fuente in fuentes_sel}

    # Crear pesta√±as para los gr√°ficos /Gr√°fica 1: Pie Chart

#Gr√°fico de pastel para distribuci√≥n energ√©tica de un a√±o espec√≠fico.

#Usa hole=0.3 para efecto donut.

#Colores personalizados, textinfo='percent+label'.

    tab1, tab2 = st.tabs(["üßÅ Distribuci√≥n Energ√©tica", "üìà Participaci√≥n Hist√≥rica"])

    with tab1:
        st.markdown("### üßÅ Distribuci√≥n Energ√©tica por Fuente")
        fig_pie = px.pie(
            df_filtrado,
            values="OFERTA_INTERNA_BRUTA_TJ",
            names="NOMBRE_ENERGETICO",
            title=f"Distribuci√≥n Energ√©tica {anio}",
            hole=0.3,
            color="NOMBRE_ENERGETICO",
            color_discrete_map=color_map,

        )
        fig_pie.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_pie, use_container_width=True)


        # üîΩ Descripci√≥n textual
        st.markdown("""
    **Tipo de gr√°fico:** Gr√°fico de pastel (donut)  
    **Descripci√≥n:** Este gr√°fico muestra la participaci√≥n porcentual de cada fuente energ√©tica en la matriz de Colombia para el a√±o seleccionado.  
    Permite comparar visualmente la proporci√≥n de energ√≠a aportada por cada fuente (como petr√≥leo, gas, hidroenerg√≠a, etc.) en un a√±o espec√≠fico.
    """)

#Gr√°fica 2: Bar Chart Apilado

#Muestra la evoluci√≥n hist√≥rica del porcentaje de cada fuente energ√©tica.

#Agrupa por a√±o y fuente energ√©tica, calcula el porcentaje para cada a√±o.

#Gr√°fico de barras apiladas (barmode="stack").

# uso de transform() y groupby() en pandas.
#Gr√°fico ideal para ver tendencias a largo plazo.


    with tab2:
        st.markdown("### üìà Participaci√≥n % por Fuente - Evoluci√≥n Hist√≥rica")
        df_stack = df[df["NOMBRE_ENERGETICO"].isin(fuentes_sel)].copy()
        df_group = df_stack.groupby(["YEAR", "NOMBRE_ENERGETICO"])["OFERTA_INTERNA_BRUTA_TJ"].sum().reset_index()
        df_group["Porcentaje"] = df_group.groupby("YEAR")["OFERTA_INTERNA_BRUTA_TJ"].transform(
            lambda x: x / x.sum() * 100
        )

        fig_bar = px.bar(
            df_group,
            x="YEAR",
            y="Porcentaje",
            color="NOMBRE_ENERGETICO",
            title="Participaci√≥n % por Fuente",
            labels={"Porcentaje": "Participaci√≥n (%)", "YEAR": "A√±o", "NOMBRE_ENERGETICO": "Fuente"},
            color_discrete_map=color_map
        )
        fig_bar.update_layout(barmode="stack", yaxis=dict(range=[0, 100]))
        st.plotly_chart(fig_bar, use_container_width=True)

# üîΩ Descripci√≥n textual
        st.markdown("""
    **Tipo de gr√°fico:** Gr√°fico de barras apiladas  
    **Descripci√≥n:** Este gr√°fico muestra la evoluci√≥n hist√≥rica de la participaci√≥n porcentual de cada fuente energ√©tica en Colombia.  
    Permite observar c√≥mo ha cambiado la matriz energ√©tica del pa√≠s a lo largo de los a√±os, identificando tendencias, reemplazos o permanencia de fuentes.
    """)